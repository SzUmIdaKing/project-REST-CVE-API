import requests
import json
import time


def is_it_end(value, border):
    if value >= border:
        return True
    else:
        return False


if __name__ == '__main__':
    headers = {
        "Content-Type": "application/json",
        "apiKey": "936a925b-dff7-44cf-907a-32b3f4be35f1"
    }

    start_index = 0
    response = requests.get(
        f'https://services.nvd.nist.gov/rest/json/cves/2.0?&resultsPerPage=1', headers=headers)
    cve = json.loads(response.text)

    total_num = cve['totalResults']
    print(f'Całkowita ilość rekordów do pobrania: {total_num}')

    score_dic_v2 = {}
    score_dic_v31 = {}
    for i in range(0, 101):
        score_dic_v2[i / 10] = 0
        score_dic_v31[i / 10] = 0

    tmp = 1
    all_get = 0
    cvss3_count = 0

    while not is_it_end(start_index, total_num):
        print(f'Indeks początkowy: {start_index}')
        if tmp == 5:
            print('Czekam 6 sekund...')
            time.sleep(6)
            tmp = 0
        tmp += 1

        print('Wysyłam request...')
        response = requests.get(
            f'https://services.nvd.nist.gov/rest/json/cves/2.0?startIndex={start_index}', headers=headers)

        print('Sprawdzam otrzymany request...')
        if response.status_code != 200:
            raise Exception("Request error, status code different than 200")

        if response:
            print('Konweruję do json...')
            cve = json.loads(response.text)
            how_many = cve['resultsPerPage']

        print('Przeszukuję odpowiedź w celu znalezienia CVSS2.0 oraz CVSS3.1...')

        for i in range(0, how_many):
            date = cve['vulnerabilities'][i]['cve']['published'][:4]
            print(date)
            if int(date) < 2023:
                if 'cvssMetricV2' in cve['vulnerabilities'][i]['cve']['metrics'].keys():
                    score_dic_v2[float(
                        cve['vulnerabilities'][i]['cve']['metrics']['cvssMetricV2'][0]['cvssData']['baseScore'])] += 1
                if 'cvssMetricV31' in cve['vulnerabilities'][i]['cve']['metrics'].keys():
                    score_dic_v31[float(
                        cve['vulnerabilities'][i]['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseScore'])] += 1
                if 'cvssMetricV30' in cve['vulnerabilities'][i]['cve']['metrics'].keys():
                    cvss3_count += 1
            all_get += 1

        print('Zakończyłem przeszukiwanie otrzymanej odpowiedzi...')
        start_index += how_many

    print('Obliczam ilość zapisanych wyników...')
    num_20 = 0
    num_31 = 0
    for i in range(0, 101):
        num_20 += score_dic_v2[i / 10]
        num_31 += score_dic_v31[i / 10]

    print(f'Ilość cvss2.0: {num_20}')
    print(f'Ilość cvss3.1: {num_31}')
    print(f'Ilość cvss3.0: {cvss3_count}')
    print(f'Ilość rekordów: {all_get}')

    print('Zapisuję wyniki do cvss20.cvs')
    with open('cvss20.csv', 'w') as f:
        for key in score_dic_v2.keys():
            f.write("%s, %s\n" % (key, score_dic_v2[key]))
    print('Pomyślnie zapisano wyniki do cvss20.cvs')

    print('Zapisuję wyniki do cvss31.cvs')
    with open('cvss31.csv', 'w') as f:
        for key in score_dic_v2.keys():
            f.write("%s, %s\n" % (key, score_dic_v2[key]))
    print('Pomyślnie zapisano wyniki do cvss31.cvs')
